using System.Collections.Generic;
using System.Linq;

namespace Terminals.Data.DB
{
    internal partial class Group : IGroup, IIntegerKeyEnityty
    {
        private IGroup parent;
        /// <summary>
        /// Gets or sets the virtual unique identifer. This isnt used, because of internal database identifier.
        /// Only for compatibility with file persistence.
        /// </summary>
        public IGroup Parent
        {
            get
            {
                this.LoadParent();
                return this.parent;
            }
            set
            {
                this.SaveParentToDatabase(value);
                this.parent = value;
            }
        }

        List<IFavorite> IGroup.Favorites
        {
            get
            {
                //this.favorites
                return this.Favorites.ToList().Cast<IFavorite>().ToList();
            }
        }

        /// <summary>
        /// Gets or sets the redirection container, which is able to obtain parent
        /// </summary>
        private Groups groups;

        /// <summary>
        /// Gets or sets its associated eventing container. Used to report favorite in group memebership changes.
        /// </summary>
        private DataDispatcher dispatcher;

        private Favorites favorites;

        /// <summary>
        /// For code generated by designer
        /// </summary>
        public Group(){ }

        internal Group(string name)
        {
            this.Name = name;
        }

        internal void AssignStores(Groups groups, DataDispatcher dispatcher)
        {
            this.groups = groups;
            this.dispatcher = dispatcher;
        }

        private void SaveParentToDatabase(IGroup value)
        {
            using (var database = Database.CreateInstance())
            {
                database.Attach(this);
                this.ParentGroup = value as Group;
                database.SaveImmediatelyIfRequested();
                database.Detach(this);
            }
        }

        private void LoadParent()
        {
            if (this.parent != null)
                return;

            this.LoadFromDatabase();
        }

        private void LoadFromDatabase()
        {
            using (var database = Database.CreateInstance())
            {
                database.Attach(this);
                this.ParentGroupReference.Load();
                // pick up the item from cache instead of temporar connection to use only cached items
                // groups should be already loaded, because this Group was also resolved from cache
                int parentGroupId = this.ParentGroup != null ? this.ParentGroup.Id : -1;
                this.parent = this.groups[parentGroupId];
                database.Detach(this);
            }
        }

        public void AddFavorite(IFavorite favorite)
        {
            AddFavoriteToDatabase(favorite);
            this.ReportGroupChanged(this);
        }

        private void AddFavoriteToDatabase(IFavorite favorite)
        {
            this.Favorites.Add((Favorite)favorite);
        }

        public void AddFavorites(List<IFavorite> favorites)
        {
            AddFavoritesToDatabase(favorites);
            this.ReportGroupChanged(this);
        }

        private void AddFavoritesToDatabase(List<IFavorite> favorites)
        {
            foreach (IFavorite favorite in favorites)
            {
                AddFavoriteToDatabase(favorite);
            }
        }

        public void RemoveFavorite(IFavorite favorite)
        {
            RemoveFavoriteFromDatabase(favorite);
            this.ReportGroupChanged(this);
        }

        public void RemoveFavorites(List<IFavorite> favorites)
        {
            RemoveFavoritesFromDatabase(favorites);
            this.ReportGroupChanged(this);
        }

        private void ReportGroupChanged(IGroup group)
        {
            this.dispatcher.ReportGroupsUpdated(new List<IGroup> { group });
        }

        private void RemoveFavoritesFromDatabase(List<IFavorite> favorites)
        {
            foreach (IFavorite favorite in favorites)
            {
                RemoveFavoriteFromDatabase(favorite);
            }
        }

        private void RemoveFavoriteFromDatabase(IFavorite favorite)
        {
            var toRemove = favorite as Favorite;
            this.Favorites.Attach(toRemove);
            this.Favorites.Remove(toRemove);
        }

        bool IStoreIdEquals<IGroup>.StoreIdEquals(IGroup oponent)
        {
            var oponentGroup = oponent as Group;
            if (oponentGroup == null)
                return false;

            return oponentGroup.Id == this.Id;
        }

        public override string ToString()
        {
            return Data.Group.ToString(this, this.Id.ToString());
        }
    }
}
